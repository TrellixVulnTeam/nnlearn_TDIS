// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe_tmp.proto

#ifndef PROTOBUF_caffe_5ftmp_2eproto__INCLUDED
#define PROTOBUF_caffe_5ftmp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace caffe_tmp {
class BlobProto;
class BlobProtoDefaultTypeInternal;
extern BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobShape;
class BlobShapeDefaultTypeInternal;
extern BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
class ConvolutionParameter;
class ConvolutionParameterDefaultTypeInternal;
extern ConvolutionParameterDefaultTypeInternal _ConvolutionParameter_default_instance_;
class Datum;
class DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class LayerParameter;
class LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class LossParameter;
class LossParameterDefaultTypeInternal;
extern LossParameterDefaultTypeInternal _LossParameter_default_instance_;
class MemoryDataParameter;
class MemoryDataParameterDefaultTypeInternal;
extern MemoryDataParameterDefaultTypeInternal _MemoryDataParameter_default_instance_;
class NetState;
class NetStateDefaultTypeInternal;
extern NetStateDefaultTypeInternal _NetState_default_instance_;
class PoolingParameter;
class PoolingParameterDefaultTypeInternal;
extern PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
}  // namespace caffe_tmp

namespace caffe_tmp {

namespace protobuf_caffe_5ftmp_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_caffe_5ftmp_2eproto

enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class BlobShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_tmp.BlobShape) */ {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  static inline const BlobShape* internal_default_instance() {
    return reinterpret_cast<const BlobShape*>(
               &_BlobShape_default_instance_);
  }

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  inline BlobShape* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::google::protobuf::int64 dim(int index) const;
  void set_dim(int index, ::google::protobuf::int64 value);
  void add_dim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe_tmp.BlobShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend struct  protobuf_caffe_5ftmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_tmp.BlobProto) */ {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  inline BlobProto* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 5 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  int diff_size() const;
  void clear_diff();
  static const int kDiffFieldNumber = 6;
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::google::protobuf::RepeatedField< float >&
      diff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // optional .caffe_tmp.BlobShape shape = 7;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 7;
  const ::caffe_tmp::BlobShape& shape() const;
  ::caffe_tmp::BlobShape* mutable_shape();
  ::caffe_tmp::BlobShape* release_shape();
  void set_allocated_shape(::caffe_tmp::BlobShape* shape);

  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe_tmp.BlobProto)
 private:
  void set_has_shape();
  void clear_has_shape();
  void set_has_num();
  void clear_has_num();
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::caffe_tmp::BlobShape* shape_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend struct  protobuf_caffe_5ftmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_tmp.Datum) */ {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  inline Datum* New() const PROTOBUF_FINAL { return New(NULL); }

  Datum* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Datum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_data = 6;
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 channels = 1;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 label = 5;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  bool encoded() const;
  void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:caffe_tmp.Datum)
 private:
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_data();
  void clear_has_data();
  void set_has_label();
  void clear_has_label();
  void set_has_encoded();
  void clear_has_encoded();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > float_data_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  bool encoded_;
  friend struct  protobuf_caffe_5ftmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_tmp.NetState) */ {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  static inline const NetState* internal_default_instance() {
    return reinterpret_cast<const NetState*>(
               &_NetState_default_instance_);
  }

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  inline NetState* New() const PROTOBUF_FINAL { return New(NULL); }

  NetState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 3;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 3;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional .caffe_tmp.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe_tmp::Phase phase() const;
  void set_phase(::caffe_tmp::Phase value);

  // @@protoc_insertion_point(class_scope:caffe_tmp.NetState)
 private:
  void set_has_phase();
  void clear_has_phase();
  void set_has_level();
  void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::int32 level_;
  int phase_;
  friend struct  protobuf_caffe_5ftmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_tmp.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LayerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string bottom = 3;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 3;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 4;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // repeated .caffe_tmp.BlobProto blobs = 7;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  const ::caffe_tmp::BlobProto& blobs(int index) const;
  ::caffe_tmp::BlobProto* mutable_blobs(int index);
  ::caffe_tmp::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe_tmp::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe_tmp::BlobProto >&
      blobs() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .caffe_tmp.Phase phase = 10;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 10;
  ::caffe_tmp::Phase phase() const;
  void set_phase(::caffe_tmp::Phase value);

  // @@protoc_insertion_point(class_scope:caffe_tmp.LayerParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_phase();
  void clear_has_phase();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedPtrField< ::caffe_tmp::BlobProto > blobs_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  int phase_;
  friend struct  protobuf_caffe_5ftmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_tmp.LossParameter) */ {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  static inline const LossParameter* internal_default_instance() {
    return reinterpret_cast<const LossParameter*>(
               &_LossParameter_default_instance_);
  }

  void Swap(LossParameter* other);

  // implements Message ----------------------------------------------

  inline LossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // optional bool normalize = 2 [default = true];
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  bool normalize() const;
  void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:caffe_tmp.LossParameter)
 private:
  void set_has_ignore_label();
  void clear_has_ignore_label();
  void set_has_normalize();
  void clear_has_normalize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  bool normalize_;
  friend struct  protobuf_caffe_5ftmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_tmp.ConvolutionParameter) */ {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  static inline const ConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionParameter*>(
               &_ConvolutionParameter_default_instance_);
  }

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  inline ConvolutionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvolutionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvolutionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT =
    ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad = 3 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 3;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 6 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 6;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 7 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 7;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 4;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 8;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 8;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 9;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 9;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional .caffe_tmp.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 15;
  ::caffe_tmp::ConvolutionParameter_Engine engine() const;
  void set_engine(::caffe_tmp::ConvolutionParameter_Engine value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe_tmp.ConvolutionParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_pad();
  void clear_has_pad();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_group();
  void clear_has_group();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  int engine_;
  bool bias_term_;
  ::google::protobuf::uint32 group_;
  friend struct  protobuf_caffe_5ftmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_tmp.MemoryDataParameter) */ {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDataParameter& default_instance();

  static inline const MemoryDataParameter* internal_default_instance() {
    return reinterpret_cast<const MemoryDataParameter*>(
               &_MemoryDataParameter_default_instance_);
  }

  void Swap(MemoryDataParameter* other);

  // implements Message ----------------------------------------------

  inline MemoryDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  MemoryDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemoryDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe_tmp.MemoryDataParameter)
 private:
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  friend struct  protobuf_caffe_5ftmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe_tmp.PoolingParameter) */ {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PoolingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT =
    PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN =
    PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe_tmp.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 1;
  ::caffe_tmp::PoolingParameter_PoolMethod pool() const;
  void set_pool(::caffe_tmp::PoolingParameter_PoolMethod value);

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 4;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe_tmp.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 11;
  ::caffe_tmp::PoolingParameter_Engine engine() const;
  void set_engine(::caffe_tmp::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  bool global_pooling() const;
  void set_global_pooling(bool value);

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 3;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe_tmp.PoolingParameter)
 private:
  void set_has_pool();
  void clear_has_pool();
  void set_has_pad();
  void clear_has_pad();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_stride();
  void clear_has_stride();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_engine();
  void clear_has_engine();
  void set_has_global_pooling();
  void clear_has_global_pooling();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int pool_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool global_pooling_;
  ::google::protobuf::uint32 stride_;
  friend struct  protobuf_caffe_5ftmp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe_tmp.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_tmp.BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_tmp.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe_tmp.BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe_tmp.BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .caffe_tmp.BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe_tmp::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe_tmp::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.BlobProto.shape)
  return shape_ != NULL ? *shape_
                         : *::caffe_tmp::BlobShape::internal_default_instance();
}
inline ::caffe_tmp::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe_tmp::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe_tmp.BlobProto.shape)
  return shape_;
}
inline ::caffe_tmp::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe_tmp.BlobProto.shape)
  clear_has_shape();
  ::caffe_tmp::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_shape(::caffe_tmp::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe_tmp.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe_tmp.BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_tmp.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_tmp.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe_tmp.BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe_tmp.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe_tmp.BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_tmp.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_tmp.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe_tmp.BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe_tmp.BlobProto.diff)
  return &diff_;
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.BlobProto.width)
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.Datum.data)
  return data_.GetNoArena();
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_tmp.Datum.data)
}
#if LANG_CXX11
inline void Datum::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_tmp.Datum.data)
}
#endif
inline void Datum::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_tmp.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_tmp.Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe_tmp.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe_tmp.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe_tmp.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe_tmp.Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_tmp.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe_tmp.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe_tmp.Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe_tmp.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.Datum.encoded)
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.Datum.encoded)
}

// -------------------------------------------------------------------

// NetState

// optional .caffe_tmp.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::caffe_tmp::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.NetState.phase)
  return static_cast< ::caffe_tmp::Phase >(phase_);
}
inline void NetState::set_phase(::caffe_tmp::Phase value) {
  assert(::caffe_tmp::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe_tmp.NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe_tmp.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe_tmp.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe_tmp.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe_tmp.NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe_tmp.NetState.stage)
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe_tmp.NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe_tmp.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe_tmp.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe_tmp.NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe_tmp.NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.LayerParameter.name)
  return name_.GetNoArena();
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_tmp.LayerParameter.name)
}
#if LANG_CXX11
inline void LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_tmp.LayerParameter.name)
}
#endif
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_tmp.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_tmp.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe_tmp.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe_tmp.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe_tmp.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.LayerParameter.type)
  return type_.GetNoArena();
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe_tmp.LayerParameter.type)
}
#if LANG_CXX11
inline void LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe_tmp.LayerParameter.type)
}
#endif
inline void LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe_tmp.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe_tmp.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe_tmp.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe_tmp.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe_tmp.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe_tmp.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe_tmp.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe_tmp.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe_tmp.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe_tmp.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe_tmp.LayerParameter.bottom)
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe_tmp.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe_tmp.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe_tmp.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe_tmp.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe_tmp.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe_tmp.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe_tmp.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe_tmp.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe_tmp.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe_tmp.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe_tmp.LayerParameter.top)
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe_tmp.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe_tmp.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe_tmp.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe_tmp.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe_tmp.LayerParameter.top)
  return &top_;
}

// optional .caffe_tmp.Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe_tmp::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.LayerParameter.phase)
  return static_cast< ::caffe_tmp::Phase >(phase_);
}
inline void LayerParameter::set_phase(::caffe_tmp::Phase value) {
  assert(::caffe_tmp::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.LayerParameter.phase)
}

// repeated .caffe_tmp.BlobProto blobs = 7;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe_tmp::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe_tmp.LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe_tmp::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe_tmp.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe_tmp::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe_tmp.LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe_tmp::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe_tmp.LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe_tmp::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe_tmp.LayerParameter.blobs)
  return blobs_;
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.LossParameter.ignore_label)
  return ignore_label_;
}
inline void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.LossParameter.ignore_label)
}

// optional bool normalize = 2 [default = true];
inline bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossParameter::clear_normalize() {
  normalize_ = true;
  clear_has_normalize();
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.LossParameter.normalize)
  return normalize_;
}
inline void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.LossParameter.normalize)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.bias_term)
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.bias_term)
}

// optional uint32 pad = 3 [default = 0];
inline bool ConvolutionParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.pad)
  return pad_;
}
inline void ConvolutionParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.pad)
}

// optional uint32 pad_h = 6 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 7 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_size = 4;
inline bool ConvolutionParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConvolutionParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline void ConvolutionParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.kernel_size)
}

// optional uint32 kernel_h = 8;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 9;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.kernel_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.group)
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.group)
}

// optional .caffe_tmp.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe_tmp::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.ConvolutionParameter.engine)
  return static_cast< ::caffe_tmp::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::caffe_tmp::ConvolutionParameter_Engine value) {
  assert(::caffe_tmp::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.ConvolutionParameter.engine)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.MemoryDataParameter.batch_size)
  return batch_size_;
}
inline void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.MemoryDataParameter.channels)
  return channels_;
}
inline void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.MemoryDataParameter.height)
  return height_;
}
inline void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.MemoryDataParameter.width)
  return width_;
}
inline void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.MemoryDataParameter.width)
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe_tmp.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe_tmp::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.pool)
  return static_cast< ::caffe_tmp::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::caffe_tmp::PoolingParameter_PoolMethod value) {
  assert(::caffe_tmp::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.kernel_size)
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.stride_w)
}

// optional .caffe_tmp.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe_tmp::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.engine)
  return static_cast< ::caffe_tmp::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::caffe_tmp::PoolingParameter_Engine value) {
  assert(::caffe_tmp::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe_tmp.PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe_tmp.PoolingParameter.global_pooling)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace caffe_tmp

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe_tmp::ConvolutionParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe_tmp::ConvolutionParameter_Engine>() {
  return ::caffe_tmp::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe_tmp::PoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe_tmp::PoolingParameter_PoolMethod>() {
  return ::caffe_tmp::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe_tmp::PoolingParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe_tmp::PoolingParameter_Engine>() {
  return ::caffe_tmp::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe_tmp::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe_tmp::Phase>() {
  return ::caffe_tmp::Phase_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_5ftmp_2eproto__INCLUDED
